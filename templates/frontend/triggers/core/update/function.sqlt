create function #{tablename}."update function"
  ()
returns trigger
  language 'plpgsql'
  security definer
as
  $body$
    declare
      "old entry" bigint;
      "new identity" bigint;
      "new entry" bigint;
    begin#{mconcat $ fmap (mappend "\n") $ fmap (flip mappend "\n") $ fmap nullCheck keyColnames <> fmap referredIdentity (filter (has _Reference) key)}#{cond (null key) ("\n" <> (surrogateNullCheck <> "\n")) ""}
      select #{tablename}."active"."entry"
      into   "old entry"
      from   #{tablename}."active" natural join #{tablename}."identity"
      where  #{mconcat $ intersperse "\n      and    " $ fmap joinActive $ withSurrogate key}
      ;

      delete from public.#{tablename}
      where       #{mconcat $ intersperse "\n      and         " $ fmap joinDelete $ withSurrogate key}
      ;

      select #{tablename}."identity"."identity"
      into   "new identity"
      from   #{tablename}."identity"
      where  #{mconcat $ intersperse "\n      and    " $ fmap joinNewIdentity $ withSurrogate key}
      ;
      if not found then
#{cond (null key) surrogateInsertIdentity naturalInsertIdentity}
      end if;

      insert into #{tablename}."journal"
        (    "identity") values
        ("new identity")
      returning #{tablename}."journal"."entry"
      into "new entry"
      ;

      insert into #{tablename}."active"
        (    "identity",     "entry") values
        ("new identity", "new entry")
      ;

      insert into #{tablename}."succession" ("entry", "successor", "timestamp")
      select      "old entry", "new entry", #{tablename}."revocation"."end timestamp"
      from        #{tablename}."revocation"
      where       #{tablename}."revocation"."entry" = "old entry"
      ;

      return new;
    end;
  $body$
;